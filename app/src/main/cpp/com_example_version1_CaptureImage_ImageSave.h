/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
#include "native-lib.h"
#include "bitmap.h"
#include <bitmap.h>
/* Header for class com_example_version1_CaptureImage_ImageSave */

#ifndef _Included_com_example_version1_CaptureImage_ImageSave
#define _Included_com_example_version1_CaptureImage_ImageSave
#ifdef __cplusplus
extern "C" {
#endif
/*
 * Class:     com_example_version1_CaptureImage_ImageSave
 * Method:    getvalue
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_com_example_version1_CaptureImage_00024ImageSave_getvalue
  (JNIEnv *env, jobject obj, jlong inpAddr, jlong outAddr, jobject mat){
    Mat &src = *(Mat*)inpAddr;
    Mat &dst = *(Mat*)outAddr;
    /*jclass cls = env->GetObjectClass(mat);
    jfieldID fieldId = env->GetFieldID(cls, "mymat", "[F");
    jobject objArray = env->GetObjectField (mat, fieldId);
    jfloatArray* fArray = reinterpret_cast<jfloatArray*>(&objArray);
    jsize len = env->GetArrayLength(*fArray);*/

    cv::Mat image = *(cv::Mat*)mat;
    PreProcess *ptr_process = new PreProcess(image, 200, 300);
    ptr_process->EdgeProcess();
    return ptr_process->action;
};
static Bitmap bitmap;
int Java_com_example_version1_CaptureImage_00024ImageSave_nativeInitBitmap(JNIEnv* env, jobject thiz, jint width, jint height) {
    return initBitmapMemory(&bitmap, width, height);
}
void Java_com_example_version1_CaptureImage_00024ImageSave_nativeGetBitmapRow(JNIEnv* env, jobject thiz, jint y, jintArray pixels) {
    int cpixels[bitmap.width];
    getBitmapRowAsIntegers(&bitmap, (int)y, &cpixels);
    (*env)->SetIntArrayRegion(env, pixels, 0, bitmap.width, cpixels);
}
void Java_com_example_version1_CaptureImage_00024ImageSave_nativeGetBitmapRow(JNIEnv* env, jobject thiz, jint y, jintArray pixels) {
    int cpixels[bitmap.width];
    getBitmapRowAsIntegers(&bitmap, (int)y, &cpixels);
    (*env)->SetIntArrayRegion(env, pixels, 0, bitmap.width, cpixels);
}

#ifdef __cplusplus
}
#endif
#endif
